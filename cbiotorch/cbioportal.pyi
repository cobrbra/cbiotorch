# Generated by bravado-types 1.0.1
# Timestamp: 2022-10-21 19:14:19.528003+00:00
# Schema version: 1.0 (beta). Backwards compatibility will be maintained (after 1.0 release)
# Schema origin url: https://www.cbioportal.org/api/v2/api-docs
# Bravado version: 11.0.3
# Bravado-core version: 5.17.1
# type: ignore

import typing
import typing_extensions

import bravado.client
import bravado.http_client
import bravado.http_future
import bravado_core.model
import bravado_core.operation
import bravado_core.resource
import bravado_core.spec

__all__ = [
    "CBioPortalSwaggerClient",
    "Cancer_TypesResource",
    "Clinical_AttributesResource",
    "Clinical_DataResource",
    "Copy_Number_SegmentsResource",
    "Discrete_Copy_Number_AlterationsResource",
    "Gene_Panel_DataResource",
    "Gene_PanelsResource",
    "Generic_Assay_DataResource",
    "Generic_AssaysResource",
    "GenesResource",
    "InfoResource",
    "Molecular_DataResource",
    "Molecular_ProfilesResource",
    "MutationsResource",
    "PatientsResource",
    "Sample_ListsResource",
    "SamplesResource",
    "Server_running_statusResource",
    "StudiesResource",
    "TreatmentsResource",
    "fetchAllClinicalDataInStudyUsingPOSTOperation",
    "fetchAllMolecularDataInMolecularProfileUsingPOSTOperation",
    "fetchClinicalAttributesUsingPOSTOperation",
    "fetchClinicalDataUsingPOSTOperation",
    "fetchCopyNumberSegmentsUsingPOSTOperation",
    "fetchDiscreteCopyNumbersInMolecularProfileUsingPOSTOperation",
    "fetchGenePanelDataInMultipleMolecularProfilesUsingPOSTOperation",
    "fetchGenePanelsUsingPOSTOperation",
    "fetchGenericAssayDataInMolecularProfileUsingPOSTOperation",
    "fetchGenericAssayDataInMultipleMolecularProfilesUsingPOSTOperation",
    "fetchGenericAssayMetaUsingPOSTOperation",
    "fetchGenesUsingPOSTOperation",
    "fetchMolecularDataInMultipleMolecularProfilesUsingPOSTOperation",
    "fetchMolecularProfilesUsingPOSTOperation",
    "fetchMutationsInMolecularProfileUsingPOSTOperation",
    "fetchMutationsInMultipleMolecularProfilesUsingPOSTOperation",
    "fetchPatientsUsingPOSTOperation",
    "fetchSampleListsUsingPOSTOperation",
    "fetchSamplesUsingPOSTOperation",
    "fetchStudiesUsingPOSTOperation",
    "getAliasesOfGeneUsingGETOperation",
    "getAllCancerTypesUsingGETOperation",
    "getAllClinicalAttributesInStudyUsingGETOperation",
    "getAllClinicalAttributesUsingGETOperation",
    "getAllClinicalDataInStudyUsingGETOperation",
    "getAllClinicalDataOfPatientInStudyUsingGETOperation",
    "getAllClinicalDataOfSampleInStudyUsingGETOperation",
    "getAllGenePanelsUsingGETOperation",
    "getAllGenesUsingGETOperation",
    "getAllMolecularDataInMolecularProfileUsingGETOperation",
    "getAllMolecularProfilesInStudyUsingGETOperation",
    "getAllMolecularProfilesUsingGETOperation",
    "getAllPatientTreatmentsUsingPOSTOperation",
    "getAllPatientsInStudyUsingGETOperation",
    "getAllPatientsUsingGETOperation",
    "getAllSampleIdsInSampleListUsingGETOperation",
    "getAllSampleListsInStudyUsingGETOperation",
    "getAllSampleListsUsingGETOperation",
    "getAllSampleTreatmentsUsingPOSTOperation",
    "getAllSamplesInStudyUsingGETOperation",
    "getAllSamplesOfPatientInStudyUsingGETOperation",
    "getAllStudiesUsingGETOperation",
    "getCancerTypeUsingGETOperation",
    "getClinicalAttributeInStudyUsingGETOperation",
    "getContainsSampleTreatmentDataUsingPOSTOperation",
    "getContainsTreatmentDataUsingPOSTOperation",
    "getCopyNumberSegmentsInSampleInStudyUsingGETOperation",
    "getDiscreteCopyNumbersInMolecularProfileUsingGETOperation",
    "getGenePanelDataUsingPOSTOperation",
    "getGenePanelUsingGETOperation",
    "getGeneUsingGETOperation",
    "getGenericAssayDataInMolecularProfileUsingGETOperation",
    "getGenericAssayMetaUsingGETOperation",
    "getGenericAssayMeta_gaUsingGETOperation",
    "getInfoUsingGETOperation",
    "getMolecularProfileUsingGETOperation",
    "getMutationsInMolecularProfileBySampleListIdUsingGETOperation",
    "getPatientInStudyUsingGETOperation",
    "getSampleInStudyUsingGETOperation",
    "getSampleListUsingGETOperation",
    "getSamplesByKeywordUsingGETOperation",
    "getServerStatusUsingGETOperation",
    "getStudyUsingGETOperation",
    "getTagsForMultipleStudiesUsingPOSTOperation",
    "getTagsUsingGETOperation",
    "AlleleSpecificCopyNumberModel",
    "AlterationFilterModel",
    "AndedPatientTreatmentFiltersModel",
    "AndedSampleTreatmentFiltersModel",
    "CancerStudyModel",
    "CancerStudyTagsModel",
    "ClinicalAttributeModel",
    "ClinicalDataModel",
    "ClinicalDataFilterModel",
    "ClinicalDataIdentifierModel",
    "ClinicalDataMultiStudyFilterModel",
    "ClinicalDataSingleStudyFilterModel",
    "ClinicalEventSampleModel",
    "CopyNumberSegModel",
    "DataFilterValueModel",
    "DiscreteCopyNumberDataModel",
    "DiscreteCopyNumberFilterModel",
    "GeneModel",
    "GeneFilterModel",
    "GeneFilterQueryModel",
    "GenePanelModel",
    "GenePanelDataModel",
    "GenePanelDataFilterModel",
    "GenePanelDataMultipleStudyFilterModel",
    "GenePanelToGeneModel",
    "GenericAssayDataModel",
    "GenericAssayDataFilterModel",
    "GenericAssayDataMultipleStudyFilterModel",
    "GenericAssayFilterModel",
    "GenericAssayMetaModel",
    "GenericAssayMetaFilterModel",
    "GenomicDataFilterModel",
    "InfoModel",
    "MolecularDataFilterModel",
    "MolecularDataMultipleStudyFilterModel",
    "MolecularProfileModel",
    "MolecularProfileFilterModel",
    "MutationModel",
    "MutationFilterModel",
    "MutationMultipleStudyFilterModel",
    "NumericGeneMolecularDataModel",
    "OredPatientTreatmentFiltersModel",
    "OredSampleTreatmentFiltersModel",
    "PatientModel",
    "PatientFilterModel",
    "PatientIdentifierModel",
    "PatientTreatmentFilterModel",
    "PatientTreatmentRowModel",
    "SampleModel",
    "SampleFilterModel",
    "SampleIdentifierModel",
    "SampleListModel",
    "SampleMolecularIdentifierModel",
    "SampleTreatmentFilterModel",
    "SampleTreatmentRowModel",
    "ServerStatusMessageModel",
    "StudyViewFilterModel",
    "TypeOfCancerModel",
]

class CBioPortalSwaggerClient(bravado.client.SwaggerClient):
    def __init__(
        self, swagger_spec: bravado_core.spec.Spec, also_return_response: bool = False
    ) -> None:
        self.Cancer_Types: Cancer_TypesResource
        self.Clinical_Attributes: Clinical_AttributesResource
        self.Clinical_Data: Clinical_DataResource
        self.Copy_Number_Segments: Copy_Number_SegmentsResource
        self.Discrete_Copy_Number_Alterations: Discrete_Copy_Number_AlterationsResource
        self.Gene_Panel_Data: Gene_Panel_DataResource
        self.Gene_Panels: Gene_PanelsResource
        self.Generic_Assay_Data: Generic_Assay_DataResource
        self.Generic_Assays: Generic_AssaysResource
        self.Genes: GenesResource
        self.Info: InfoResource
        self.Molecular_Data: Molecular_DataResource
        self.Molecular_Profiles: Molecular_ProfilesResource
        self.Mutations: MutationsResource
        self.Patients: PatientsResource
        self.Sample_Lists: Sample_ListsResource
        self.Samples: SamplesResource
        self.Server_running_status: Server_running_statusResource
        self.Studies: StudiesResource
        self.Treatments: TreatmentsResource
        self.swagger_spec = swagger_spec
    @classmethod
    def from_url(
        cls,
        spec_url: str,
        http_client: bravado.http_client.HttpClient = None,
        request_headers: typing.Mapping = None,
        config: typing.Mapping = None,
    ) -> CBioPortalSwaggerClient: ...
    @classmethod
    def from_spec(
        cls,
        spec_dict: typing.Mapping[str, typing.Any],
        origin_url: str = None,
        http_client: bravado.http_client.HttpClient = None,
        config: typing.Mapping = None,
    ) -> CBioPortalSwaggerClient: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["AlleleSpecificCopyNumber"]
    ) -> typing.Type[AlleleSpecificCopyNumberModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["AlterationFilter"]
    ) -> typing.Type[AlterationFilterModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["AndedPatientTreatmentFilters"]
    ) -> typing.Type[AndedPatientTreatmentFiltersModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["AndedSampleTreatmentFilters"]
    ) -> typing.Type[AndedSampleTreatmentFiltersModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["CancerStudy"]
    ) -> typing.Type[CancerStudyModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["CancerStudyTags"]
    ) -> typing.Type[CancerStudyTagsModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["ClinicalAttribute"]
    ) -> typing.Type[ClinicalAttributeModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["ClinicalData"]
    ) -> typing.Type[ClinicalDataModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["ClinicalDataFilter"]
    ) -> typing.Type[ClinicalDataFilterModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["ClinicalDataIdentifier"]
    ) -> typing.Type[ClinicalDataIdentifierModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["ClinicalDataMultiStudyFilter"]
    ) -> typing.Type[ClinicalDataMultiStudyFilterModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["ClinicalDataSingleStudyFilter"]
    ) -> typing.Type[ClinicalDataSingleStudyFilterModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["ClinicalEventSample"]
    ) -> typing.Type[ClinicalEventSampleModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["CopyNumberSeg"]
    ) -> typing.Type[CopyNumberSegModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["DataFilterValue"]
    ) -> typing.Type[DataFilterValueModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["DiscreteCopyNumberData"]
    ) -> typing.Type[DiscreteCopyNumberDataModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["DiscreteCopyNumberFilter"]
    ) -> typing.Type[DiscreteCopyNumberFilterModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["Gene"]
    ) -> typing.Type[GeneModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["GeneFilter"]
    ) -> typing.Type[GeneFilterModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["GeneFilterQuery"]
    ) -> typing.Type[GeneFilterQueryModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["GenePanel"]
    ) -> typing.Type[GenePanelModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["GenePanelData"]
    ) -> typing.Type[GenePanelDataModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["GenePanelDataFilter"]
    ) -> typing.Type[GenePanelDataFilterModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["GenePanelDataMultipleStudyFilter"]
    ) -> typing.Type[GenePanelDataMultipleStudyFilterModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["GenePanelToGene"]
    ) -> typing.Type[GenePanelToGeneModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["GenericAssayData"]
    ) -> typing.Type[GenericAssayDataModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["GenericAssayDataFilter"]
    ) -> typing.Type[GenericAssayDataFilterModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["GenericAssayDataMultipleStudyFilter"]
    ) -> typing.Type[GenericAssayDataMultipleStudyFilterModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["GenericAssayFilter"]
    ) -> typing.Type[GenericAssayFilterModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["GenericAssayMeta"]
    ) -> typing.Type[GenericAssayMetaModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["GenericAssayMetaFilter"]
    ) -> typing.Type[GenericAssayMetaFilterModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["GenomicDataFilter"]
    ) -> typing.Type[GenomicDataFilterModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["Info"]
    ) -> typing.Type[InfoModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["MolecularDataFilter"]
    ) -> typing.Type[MolecularDataFilterModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["MolecularDataMultipleStudyFilter"]
    ) -> typing.Type[MolecularDataMultipleStudyFilterModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["MolecularProfile"]
    ) -> typing.Type[MolecularProfileModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["MolecularProfileFilter"]
    ) -> typing.Type[MolecularProfileFilterModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["Mutation"]
    ) -> typing.Type[MutationModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["MutationFilter"]
    ) -> typing.Type[MutationFilterModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["MutationMultipleStudyFilter"]
    ) -> typing.Type[MutationMultipleStudyFilterModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["NumericGeneMolecularData"]
    ) -> typing.Type[NumericGeneMolecularDataModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["OredPatientTreatmentFilters"]
    ) -> typing.Type[OredPatientTreatmentFiltersModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["OredSampleTreatmentFilters"]
    ) -> typing.Type[OredSampleTreatmentFiltersModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["Patient"]
    ) -> typing.Type[PatientModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["PatientFilter"]
    ) -> typing.Type[PatientFilterModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["PatientIdentifier"]
    ) -> typing.Type[PatientIdentifierModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["PatientTreatmentFilter"]
    ) -> typing.Type[PatientTreatmentFilterModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["PatientTreatmentRow"]
    ) -> typing.Type[PatientTreatmentRowModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["Sample"]
    ) -> typing.Type[SampleModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["SampleFilter"]
    ) -> typing.Type[SampleFilterModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["SampleIdentifier"]
    ) -> typing.Type[SampleIdentifierModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["SampleList"]
    ) -> typing.Type[SampleListModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["SampleMolecularIdentifier"]
    ) -> typing.Type[SampleMolecularIdentifierModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["SampleTreatmentFilter"]
    ) -> typing.Type[SampleTreatmentFilterModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["SampleTreatmentRow"]
    ) -> typing.Type[SampleTreatmentRowModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["ServerStatusMessage"]
    ) -> typing.Type[ServerStatusMessageModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["StudyViewFilter"]
    ) -> typing.Type[StudyViewFilterModel]: ...
    @typing.overload
    def get_model(
        self, model_name: typing_extensions.Literal["TypeOfCancer"]
    ) -> typing.Type[TypeOfCancerModel]: ...
    @typing.overload
    def get_model(
        self, model_name: str
    ) -> typing.Union[
        typing.Type[AlleleSpecificCopyNumberModel],
        typing.Type[AlterationFilterModel],
        typing.Type[AndedPatientTreatmentFiltersModel],
        typing.Type[AndedSampleTreatmentFiltersModel],
        typing.Type[CancerStudyModel],
        typing.Type[CancerStudyTagsModel],
        typing.Type[ClinicalAttributeModel],
        typing.Type[ClinicalDataModel],
        typing.Type[ClinicalDataFilterModel],
        typing.Type[ClinicalDataIdentifierModel],
        typing.Type[ClinicalDataMultiStudyFilterModel],
        typing.Type[ClinicalDataSingleStudyFilterModel],
        typing.Type[ClinicalEventSampleModel],
        typing.Type[CopyNumberSegModel],
        typing.Type[DataFilterValueModel],
        typing.Type[DiscreteCopyNumberDataModel],
        typing.Type[DiscreteCopyNumberFilterModel],
        typing.Type[GeneModel],
        typing.Type[GeneFilterModel],
        typing.Type[GeneFilterQueryModel],
        typing.Type[GenePanelModel],
        typing.Type[GenePanelDataModel],
        typing.Type[GenePanelDataFilterModel],
        typing.Type[GenePanelDataMultipleStudyFilterModel],
        typing.Type[GenePanelToGeneModel],
        typing.Type[GenericAssayDataModel],
        typing.Type[GenericAssayDataFilterModel],
        typing.Type[GenericAssayDataMultipleStudyFilterModel],
        typing.Type[GenericAssayFilterModel],
        typing.Type[GenericAssayMetaModel],
        typing.Type[GenericAssayMetaFilterModel],
        typing.Type[GenomicDataFilterModel],
        typing.Type[InfoModel],
        typing.Type[MolecularDataFilterModel],
        typing.Type[MolecularDataMultipleStudyFilterModel],
        typing.Type[MolecularProfileModel],
        typing.Type[MolecularProfileFilterModel],
        typing.Type[MutationModel],
        typing.Type[MutationFilterModel],
        typing.Type[MutationMultipleStudyFilterModel],
        typing.Type[NumericGeneMolecularDataModel],
        typing.Type[OredPatientTreatmentFiltersModel],
        typing.Type[OredSampleTreatmentFiltersModel],
        typing.Type[PatientModel],
        typing.Type[PatientFilterModel],
        typing.Type[PatientIdentifierModel],
        typing.Type[PatientTreatmentFilterModel],
        typing.Type[PatientTreatmentRowModel],
        typing.Type[SampleModel],
        typing.Type[SampleFilterModel],
        typing.Type[SampleIdentifierModel],
        typing.Type[SampleListModel],
        typing.Type[SampleMolecularIdentifierModel],
        typing.Type[SampleTreatmentFilterModel],
        typing.Type[SampleTreatmentRowModel],
        typing.Type[ServerStatusMessageModel],
        typing.Type[StudyViewFilterModel],
        typing.Type[TypeOfCancerModel],
    ]: ...
    @typing.no_type_check
    def __getattr__(self, attr): ...

class _Resource(bravado_core.resource.Resource):
    @typing.no_type_check
    def __getattr__(self, attr): ...

class Cancer_TypesResource(_Resource):
    getAllCancerTypesUsingGET: getAllCancerTypesUsingGETOperation
    getCancerTypeUsingGET: getCancerTypeUsingGETOperation

class Clinical_AttributesResource(_Resource):
    fetchClinicalAttributesUsingPOST: fetchClinicalAttributesUsingPOSTOperation
    getAllClinicalAttributesInStudyUsingGET: getAllClinicalAttributesInStudyUsingGETOperation
    getAllClinicalAttributesUsingGET: getAllClinicalAttributesUsingGETOperation
    getClinicalAttributeInStudyUsingGET: getClinicalAttributeInStudyUsingGETOperation

class Clinical_DataResource(_Resource):
    fetchAllClinicalDataInStudyUsingPOST: fetchAllClinicalDataInStudyUsingPOSTOperation
    fetchClinicalDataUsingPOST: fetchClinicalDataUsingPOSTOperation
    getAllClinicalDataInStudyUsingGET: getAllClinicalDataInStudyUsingGETOperation
    getAllClinicalDataOfPatientInStudyUsingGET: getAllClinicalDataOfPatientInStudyUsingGETOperation
    getAllClinicalDataOfSampleInStudyUsingGET: getAllClinicalDataOfSampleInStudyUsingGETOperation

class Copy_Number_SegmentsResource(_Resource):
    fetchCopyNumberSegmentsUsingPOST: fetchCopyNumberSegmentsUsingPOSTOperation
    getCopyNumberSegmentsInSampleInStudyUsingGET: getCopyNumberSegmentsInSampleInStudyUsingGETOperation

class Discrete_Copy_Number_AlterationsResource(_Resource):
    fetchDiscreteCopyNumbersInMolecularProfileUsingPOST: fetchDiscreteCopyNumbersInMolecularProfileUsingPOSTOperation
    getDiscreteCopyNumbersInMolecularProfileUsingGET: getDiscreteCopyNumbersInMolecularProfileUsingGETOperation

class Gene_Panel_DataResource(_Resource):
    fetchGenePanelDataInMultipleMolecularProfilesUsingPOST: fetchGenePanelDataInMultipleMolecularProfilesUsingPOSTOperation
    getGenePanelDataUsingPOST: getGenePanelDataUsingPOSTOperation

class Gene_PanelsResource(_Resource):
    fetchGenePanelsUsingPOST: fetchGenePanelsUsingPOSTOperation
    getAllGenePanelsUsingGET: getAllGenePanelsUsingGETOperation
    getGenePanelUsingGET: getGenePanelUsingGETOperation

class Generic_Assay_DataResource(_Resource):
    fetchGenericAssayDataInMolecularProfileUsingPOST: fetchGenericAssayDataInMolecularProfileUsingPOSTOperation
    fetchGenericAssayDataInMultipleMolecularProfilesUsingPOST: fetchGenericAssayDataInMultipleMolecularProfilesUsingPOSTOperation
    getGenericAssayDataInMolecularProfileUsingGET: getGenericAssayDataInMolecularProfileUsingGETOperation

class Generic_AssaysResource(_Resource):
    fetchGenericAssayMetaUsingPOST: fetchGenericAssayMetaUsingPOSTOperation
    getGenericAssayMetaUsingGET: getGenericAssayMetaUsingGETOperation
    getGenericAssayMeta_gaUsingGET: getGenericAssayMeta_gaUsingGETOperation

class GenesResource(_Resource):
    fetchGenesUsingPOST: fetchGenesUsingPOSTOperation
    getAliasesOfGeneUsingGET: getAliasesOfGeneUsingGETOperation
    getAllGenesUsingGET: getAllGenesUsingGETOperation
    getGeneUsingGET: getGeneUsingGETOperation

class InfoResource(_Resource):
    getInfoUsingGET: getInfoUsingGETOperation

class Molecular_DataResource(_Resource):
    fetchAllMolecularDataInMolecularProfileUsingPOST: fetchAllMolecularDataInMolecularProfileUsingPOSTOperation
    fetchMolecularDataInMultipleMolecularProfilesUsingPOST: fetchMolecularDataInMultipleMolecularProfilesUsingPOSTOperation
    getAllMolecularDataInMolecularProfileUsingGET: getAllMolecularDataInMolecularProfileUsingGETOperation

class Molecular_ProfilesResource(_Resource):
    fetchMolecularProfilesUsingPOST: fetchMolecularProfilesUsingPOSTOperation
    getAllMolecularProfilesInStudyUsingGET: getAllMolecularProfilesInStudyUsingGETOperation
    getAllMolecularProfilesUsingGET: getAllMolecularProfilesUsingGETOperation
    getMolecularProfileUsingGET: getMolecularProfileUsingGETOperation

class MutationsResource(_Resource):
    fetchMutationsInMolecularProfileUsingPOST: fetchMutationsInMolecularProfileUsingPOSTOperation
    fetchMutationsInMultipleMolecularProfilesUsingPOST: fetchMutationsInMultipleMolecularProfilesUsingPOSTOperation
    getMutationsInMolecularProfileBySampleListIdUsingGET: getMutationsInMolecularProfileBySampleListIdUsingGETOperation

class PatientsResource(_Resource):
    fetchPatientsUsingPOST: fetchPatientsUsingPOSTOperation
    getAllPatientsInStudyUsingGET: getAllPatientsInStudyUsingGETOperation
    getAllPatientsUsingGET: getAllPatientsUsingGETOperation
    getPatientInStudyUsingGET: getPatientInStudyUsingGETOperation

class Sample_ListsResource(_Resource):
    fetchSampleListsUsingPOST: fetchSampleListsUsingPOSTOperation
    getAllSampleIdsInSampleListUsingGET: getAllSampleIdsInSampleListUsingGETOperation
    getAllSampleListsInStudyUsingGET: getAllSampleListsInStudyUsingGETOperation
    getAllSampleListsUsingGET: getAllSampleListsUsingGETOperation
    getSampleListUsingGET: getSampleListUsingGETOperation

class SamplesResource(_Resource):
    fetchSamplesUsingPOST: fetchSamplesUsingPOSTOperation
    getAllSamplesInStudyUsingGET: getAllSamplesInStudyUsingGETOperation
    getAllSamplesOfPatientInStudyUsingGET: getAllSamplesOfPatientInStudyUsingGETOperation
    getSampleInStudyUsingGET: getSampleInStudyUsingGETOperation
    getSamplesByKeywordUsingGET: getSamplesByKeywordUsingGETOperation

class Server_running_statusResource(_Resource):
    getServerStatusUsingGET: getServerStatusUsingGETOperation

class StudiesResource(_Resource):
    fetchStudiesUsingPOST: fetchStudiesUsingPOSTOperation
    getAllStudiesUsingGET: getAllStudiesUsingGETOperation
    getStudyUsingGET: getStudyUsingGETOperation
    getTagsForMultipleStudiesUsingPOST: getTagsForMultipleStudiesUsingPOSTOperation
    getTagsUsingGET: getTagsUsingGETOperation

class TreatmentsResource(_Resource):
    getAllPatientTreatmentsUsingPOST: getAllPatientTreatmentsUsingPOSTOperation
    getAllSampleTreatmentsUsingPOST: getAllSampleTreatmentsUsingPOSTOperation
    getContainsSampleTreatmentDataUsingPOST: getContainsSampleTreatmentDataUsingPOSTOperation
    getContainsTreatmentDataUsingPOST: getContainsTreatmentDataUsingPOSTOperation

_Operation = bravado_core.operation.Operation

class fetchAllClinicalDataInStudyUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        clinicalDataSingleStudyFilter: ClinicalDataSingleStudyFilterModel,
        clinicalDataType: str = None,
        projection: str = None,
        studyId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[ClinicalDataModel],]]: ...  # 200

class fetchAllMolecularDataInMolecularProfileUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        molecularDataFilter: MolecularDataFilterModel,
        molecularProfileId: str,
        projection: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[
        typing.Union[
            typing.List[NumericGeneMolecularDataModel],  # 200
        ]
    ]: ...

class fetchClinicalAttributesUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        projection: str = None,
        studyIds: typing.List[str],
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[
        typing.Union[
            typing.List[ClinicalAttributeModel],  # 200
        ]
    ]: ...

class fetchClinicalDataUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        clinicalDataMultiStudyFilter: ClinicalDataMultiStudyFilterModel,
        clinicalDataType: str = None,
        projection: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[ClinicalDataModel],]]: ...  # 200

class fetchCopyNumberSegmentsUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        chromosome: str = None,
        projection: str = None,
        sampleIdentifiers: typing.List[SampleIdentifierModel],
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[CopyNumberSegModel],]]: ...  # 200

class fetchDiscreteCopyNumbersInMolecularProfileUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        discreteCopyNumberEventType: str = None,
        discreteCopyNumberFilter: DiscreteCopyNumberFilterModel,
        molecularProfileId: str,
        projection: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[
        typing.Union[
            typing.List[DiscreteCopyNumberDataModel],  # 200
        ]
    ]: ...

class fetchGenePanelDataInMultipleMolecularProfilesUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        genePanelDataMultipleStudyFilter: GenePanelDataMultipleStudyFilterModel,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[GenePanelDataModel],]]: ...  # 200

class fetchGenePanelsUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        genePanelIds: typing.List[str],
        projection: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[GenePanelModel],]]: ...  # 200

class fetchGenericAssayDataInMolecularProfileUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        genericAssayDataFilter: GenericAssayFilterModel,
        molecularProfileId: str,
        projection: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[
        typing.Union[
            typing.List[GenericAssayDataModel],  # 200
        ]
    ]: ...

class fetchGenericAssayDataInMultipleMolecularProfilesUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        genericAssayDataMultipleStudyFilter: GenericAssayDataMultipleStudyFilterModel,
        projection: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[
        typing.Union[
            typing.List[GenericAssayDataModel],  # 200
        ]
    ]: ...

class fetchGenericAssayMetaUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        genericAssayMetaFilter: GenericAssayMetaFilterModel,
        projection: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[
        typing.Union[
            typing.List[GenericAssayMetaModel],  # 200
        ]
    ]: ...

class fetchGenesUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        geneIdType: str = None,
        geneIds: typing.List[str],
        projection: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[GeneModel],]]: ...  # 200

class fetchMolecularDataInMultipleMolecularProfilesUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        molecularDataMultipleStudyFilter: MolecularDataMultipleStudyFilterModel,
        projection: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[
        typing.Union[
            typing.List[NumericGeneMolecularDataModel],  # 200
        ]
    ]: ...

class fetchMolecularProfilesUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        molecularProfileFilter: MolecularProfileFilterModel,
        projection: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[
        typing.Union[
            typing.List[MolecularProfileModel],  # 200
        ]
    ]: ...

class fetchMutationsInMolecularProfileUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        direction: str = None,
        molecularProfileId: str,
        mutationFilter: MutationFilterModel,
        pageNumber: int = None,
        pageSize: int = None,
        projection: str = None,
        sortBy: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[MutationModel],]]: ...  # 200

class fetchMutationsInMultipleMolecularProfilesUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        direction: str = None,
        mutationMultipleStudyFilter: MutationMultipleStudyFilterModel,
        pageNumber: int = None,
        pageSize: int = None,
        projection: str = None,
        sortBy: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[MutationModel],]]: ...  # 200

class fetchPatientsUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        patientFilter: PatientFilterModel,
        projection: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[PatientModel],]]: ...  # 200

class fetchSampleListsUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        projection: str = None,
        sampleListIds: typing.List[str],
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[SampleListModel],]]: ...  # 200

class fetchSamplesUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        projection: str = None,
        sampleFilter: SampleFilterModel,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[SampleModel],]]: ...  # 200

class fetchStudiesUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        projection: str = None,
        studyIds: typing.List[str],
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[CancerStudyModel],]]: ...  # 200

class getAliasesOfGeneUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        geneId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[str],]]: ...  # 200

class getAllCancerTypesUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        direction: str = None,
        pageNumber: int = None,
        pageSize: int = None,
        projection: str = None,
        sortBy: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[TypeOfCancerModel],]]: ...  # 200

class getAllClinicalAttributesInStudyUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        direction: str = None,
        pageNumber: int = None,
        pageSize: int = None,
        projection: str = None,
        sortBy: str = None,
        studyId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[
        typing.Union[
            typing.List[ClinicalAttributeModel],  # 200
        ]
    ]: ...

class getAllClinicalAttributesUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        direction: str = None,
        pageNumber: int = None,
        pageSize: int = None,
        projection: str = None,
        sortBy: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[
        typing.Union[
            typing.List[ClinicalAttributeModel],  # 200
        ]
    ]: ...

class getAllClinicalDataInStudyUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        attributeId: str = None,
        clinicalDataType: str = None,
        direction: str = None,
        pageNumber: int = None,
        pageSize: int = None,
        projection: str = None,
        sortBy: str = None,
        studyId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[ClinicalDataModel],]]: ...  # 200

class getAllClinicalDataOfPatientInStudyUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        attributeId: str = None,
        direction: str = None,
        pageNumber: int = None,
        pageSize: int = None,
        patientId: str,
        projection: str = None,
        sortBy: str = None,
        studyId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[ClinicalDataModel],]]: ...  # 200

class getAllClinicalDataOfSampleInStudyUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        attributeId: str = None,
        direction: str = None,
        pageNumber: int = None,
        pageSize: int = None,
        projection: str = None,
        sampleId: str,
        sortBy: str = None,
        studyId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[ClinicalDataModel],]]: ...  # 200

class getAllGenePanelsUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        direction: str = None,
        pageNumber: int = None,
        pageSize: int = None,
        projection: str = None,
        sortBy: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[GenePanelModel],]]: ...  # 200

class getAllGenesUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        alias: str = None,
        direction: str = None,
        keyword: str = None,
        pageNumber: int = None,
        pageSize: int = None,
        projection: str = None,
        sortBy: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[GeneModel],]]: ...  # 200

class getAllMolecularDataInMolecularProfileUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        entrezGeneId: int,
        molecularProfileId: str,
        projection: str = None,
        sampleListId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[
        typing.Union[
            typing.List[NumericGeneMolecularDataModel],  # 200
        ]
    ]: ...

class getAllMolecularProfilesInStudyUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        direction: str = None,
        pageNumber: int = None,
        pageSize: int = None,
        projection: str = None,
        sortBy: str = None,
        studyId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[
        typing.Union[
            typing.List[MolecularProfileModel],  # 200
        ]
    ]: ...

class getAllMolecularProfilesUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        direction: str = None,
        pageNumber: int = None,
        pageSize: int = None,
        projection: str = None,
        sortBy: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[
        typing.Union[
            typing.List[MolecularProfileModel],  # 200
        ]
    ]: ...

class getAllPatientTreatmentsUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        studyViewFilter: StudyViewFilterModel,
        tier: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[
        typing.Union[
            typing.List[PatientTreatmentRowModel],  # 200
        ]
    ]: ...

class getAllPatientsInStudyUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        direction: str = None,
        pageNumber: int = None,
        pageSize: int = None,
        projection: str = None,
        sortBy: str = None,
        studyId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[PatientModel],]]: ...  # 200

class getAllPatientsUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        direction: str = None,
        keyword: str = None,
        pageNumber: int = None,
        pageSize: int = None,
        projection: str = None,
        sortBy: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[PatientModel],]]: ...  # 200

class getAllSampleIdsInSampleListUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        sampleListId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[str],]]: ...  # 200

class getAllSampleListsInStudyUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        direction: str = None,
        pageNumber: int = None,
        pageSize: int = None,
        projection: str = None,
        sortBy: str = None,
        studyId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[SampleListModel],]]: ...  # 200

class getAllSampleListsUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        direction: str = None,
        pageNumber: int = None,
        pageSize: int = None,
        projection: str = None,
        sortBy: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[SampleListModel],]]: ...  # 200

class getAllSampleTreatmentsUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        studyViewFilter: StudyViewFilterModel,
        tier: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[
        typing.Union[
            typing.List[SampleTreatmentRowModel],  # 200
        ]
    ]: ...

class getAllSamplesInStudyUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        direction: str = None,
        pageNumber: int = None,
        pageSize: int = None,
        projection: str = None,
        sortBy: str = None,
        studyId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[SampleModel],]]: ...  # 200

class getAllSamplesOfPatientInStudyUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        direction: str = None,
        pageNumber: int = None,
        pageSize: int = None,
        patientId: str,
        projection: str = None,
        sortBy: str = None,
        studyId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[SampleModel],]]: ...  # 200

class getAllStudiesUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        authenticated: bool = None,
        authorities_0_authority: str = None,
        credentials: typing.Mapping[str, typing.Any] = None,
        details: typing.Mapping[str, typing.Any] = None,
        direction: str = None,
        keyword: str = None,
        pageNumber: int = None,
        pageSize: int = None,
        principal: typing.Mapping[str, typing.Any] = None,
        projection: str = None,
        sortBy: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[CancerStudyModel],]]: ...  # 200

class getCancerTypeUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        cancerTypeId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[TypeOfCancerModel,]]: ...  # 200

class getClinicalAttributeInStudyUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        clinicalAttributeId: str,
        studyId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[ClinicalAttributeModel,]]: ...  # 200

class getContainsSampleTreatmentDataUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        studyIds: typing.List[str],
        tier: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[bool,]]: ...  # 200

class getContainsTreatmentDataUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        studyIds: typing.List[str],
        tier: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[bool,]]: ...  # 200

class getCopyNumberSegmentsInSampleInStudyUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        chromosome: str = None,
        direction: str = None,
        pageNumber: int = None,
        pageSize: int = None,
        projection: str = None,
        sampleId: str,
        sortBy: str = None,
        studyId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[CopyNumberSegModel],]]: ...  # 200

class getDiscreteCopyNumbersInMolecularProfileUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        discreteCopyNumberEventType: str = None,
        molecularProfileId: str,
        projection: str = None,
        sampleListId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[
        typing.Union[
            typing.List[DiscreteCopyNumberDataModel],  # 200
        ]
    ]: ...

class getGenePanelDataUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        genePanelDataFilter: GenePanelDataFilterModel,
        molecularProfileId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[GenePanelDataModel],]]: ...  # 200

class getGenePanelUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        genePanelId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[GenePanelModel,]]: ...  # 200

class getGeneUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        geneId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[GeneModel,]]: ...  # 200

class getGenericAssayDataInMolecularProfileUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        genericAssayStableId: str,
        molecularProfileId: str,
        projection: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[
        typing.Union[
            typing.List[GenericAssayDataModel],  # 200
        ]
    ]: ...

class getGenericAssayMetaUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        molecularProfileId: str,
        projection: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[
        typing.Union[
            typing.List[GenericAssayMetaModel],  # 200
        ]
    ]: ...

class getGenericAssayMeta_gaUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        genericAssayStableId: str,
        projection: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[
        typing.Union[
            typing.List[GenericAssayMetaModel],  # 200
        ]
    ]: ...

class getInfoUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[InfoModel,]]: ...  # 200

class getMolecularProfileUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        molecularProfileId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[MolecularProfileModel,]]: ...  # 200

class getMutationsInMolecularProfileBySampleListIdUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        direction: str = None,
        entrezGeneId: int = None,
        molecularProfileId: str,
        pageNumber: int = None,
        pageSize: int = None,
        projection: str = None,
        sampleListId: str,
        sortBy: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[MutationModel],]]: ...  # 200

class getPatientInStudyUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        patientId: str,
        studyId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[PatientModel,]]: ...  # 200

class getSampleInStudyUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        sampleId: str,
        studyId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[SampleModel,]]: ...  # 200

class getSampleListUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        sampleListId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[SampleListModel,]]: ...  # 200

class getSamplesByKeywordUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        direction: str = None,
        keyword: str = None,
        pageNumber: int = None,
        pageSize: int = None,
        projection: str = None,
        sortBy: str = None,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.List[SampleModel],]]: ...  # 200

class getServerStatusUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[ServerStatusMessageModel,]]: ...  # 200

class getStudyUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        studyId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[CancerStudyModel,]]: ...  # 200

class getTagsForMultipleStudiesUsingPOSTOperation(_Operation):
    def __call__(
        self,
        *,
        studyIds: typing.List[str],
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[
        typing.Union[
            typing.List[CancerStudyTagsModel],  # 200
        ]
    ]: ...

class getTagsUsingGETOperation(_Operation):
    def __call__(
        self,
        *,
        studyId: str,
        _request_options: typing.Mapping[str, typing.Any] = None,
    ) -> bravado.http_future.HttpFuture[typing.Union[typing.Mapping[str, typing.Any],]]: ...  # 200

class _Model(bravado_core.model.Model):
    @typing.no_type_check
    def __getattr__(self, attr): ...
    @typing.no_type_check
    def __setattr__(self, attr, value): ...
    @typing.no_type_check
    def __delattr__(self, attr, value): ...

class AlleleSpecificCopyNumberModel(_Model):
    def __init__(
        self,
        *,
        ascnIntegerCopyNumber: int = None,
        ascnMethod: str = None,
        ccfExpectedCopies: float = None,
        ccfExpectedCopiesUpper: float = None,
        clonal: str = None,
        expectedAltCopies: int = None,
        minorCopyNumber: int = None,
        totalCopyNumber: int = None,
    ) -> None:
        self.ascnIntegerCopyNumber = ascnIntegerCopyNumber
        self.ascnMethod = ascnMethod
        self.ccfExpectedCopies = ccfExpectedCopies
        self.ccfExpectedCopiesUpper = ccfExpectedCopiesUpper
        self.clonal = clonal
        self.expectedAltCopies = expectedAltCopies
        self.minorCopyNumber = minorCopyNumber
        self.totalCopyNumber = totalCopyNumber

class AlterationFilterModel(_Model):
    def __init__(
        self,
        *,
        copyNumberAlterationEventTypes: typing.Mapping[str, typing.Any] = None,
        includeDriver: bool = None,
        includeGermline: bool = None,
        includeSomatic: bool = None,
        includeUnknownOncogenicity: bool = None,
        includeUnknownStatus: bool = None,
        includeUnknownTier: bool = None,
        includeVUS: bool = None,
        mutationEventTypes: typing.Mapping[str, typing.Any] = None,
        structuralVariants: bool = None,
        tiersBooleanMap: typing.Mapping[str, typing.Any] = None,
    ) -> None:
        self.copyNumberAlterationEventTypes = copyNumberAlterationEventTypes
        self.includeDriver = includeDriver
        self.includeGermline = includeGermline
        self.includeSomatic = includeSomatic
        self.includeUnknownOncogenicity = includeUnknownOncogenicity
        self.includeUnknownStatus = includeUnknownStatus
        self.includeUnknownTier = includeUnknownTier
        self.includeVUS = includeVUS
        self.mutationEventTypes = mutationEventTypes
        self.structuralVariants = structuralVariants
        self.tiersBooleanMap = tiersBooleanMap

class AndedPatientTreatmentFiltersModel(_Model):
    def __init__(
        self,
        *,
        filters: typing.List[OredPatientTreatmentFiltersModel] = None,
    ) -> None:
        self.filters = filters

class AndedSampleTreatmentFiltersModel(_Model):
    def __init__(
        self,
        *,
        filters: typing.List[OredSampleTreatmentFiltersModel] = None,
    ) -> None:
        self.filters = filters

class CancerStudyModel(_Model):
    def __init__(
        self,
        *,
        allSampleCount: int = None,
        cancerType: TypeOfCancerModel = None,
        cancerTypeId: str = None,
        citation: str = None,
        cnaSampleCount: int = None,
        completeSampleCount: int = None,
        description: str = None,
        groups: str = None,
        importDate: str = None,
        massSpectrometrySampleCount: int = None,
        methylationHm27SampleCount: int = None,
        miRnaSampleCount: int = None,
        mrnaMicroarraySampleCount: int = None,
        mrnaRnaSeqSampleCount: int = None,
        mrnaRnaSeqV2SampleCount: int = None,
        name: str = None,
        pmid: str = None,
        publicStudy: bool = None,
        readPermission: bool = None,
        referenceGenome: str = None,
        rppaSampleCount: int = None,
        sequencedSampleCount: int = None,
        status: int = None,
        studyId: str,
    ) -> None:
        self.allSampleCount = allSampleCount
        self.cancerType = cancerType
        self.cancerTypeId = cancerTypeId
        self.citation = citation
        self.cnaSampleCount = cnaSampleCount
        self.completeSampleCount = completeSampleCount
        self.description = description
        self.groups = groups
        self.importDate = importDate
        self.massSpectrometrySampleCount = massSpectrometrySampleCount
        self.methylationHm27SampleCount = methylationHm27SampleCount
        self.miRnaSampleCount = miRnaSampleCount
        self.mrnaMicroarraySampleCount = mrnaMicroarraySampleCount
        self.mrnaRnaSeqSampleCount = mrnaRnaSeqSampleCount
        self.mrnaRnaSeqV2SampleCount = mrnaRnaSeqV2SampleCount
        self.name = name
        self.pmid = pmid
        self.publicStudy = publicStudy
        self.readPermission = readPermission
        self.referenceGenome = referenceGenome
        self.rppaSampleCount = rppaSampleCount
        self.sequencedSampleCount = sequencedSampleCount
        self.status = status
        self.studyId = studyId

class CancerStudyTagsModel(_Model):
    def __init__(
        self,
        *,
        cancerStudyId: int = None,
        tags: str = None,
    ) -> None:
        self.cancerStudyId = cancerStudyId
        self.tags = tags

class ClinicalAttributeModel(_Model):
    def __init__(
        self,
        *,
        clinicalAttributeId: str,
        datatype: str = None,
        description: str = None,
        displayName: str,
        patientAttribute: bool,
        priority: str = None,
        studyId: str,
    ) -> None:
        self.clinicalAttributeId = clinicalAttributeId
        self.datatype = datatype
        self.description = description
        self.displayName = displayName
        self.patientAttribute = patientAttribute
        self.priority = priority
        self.studyId = studyId

class ClinicalDataModel(_Model):
    def __init__(
        self,
        *,
        clinicalAttribute: ClinicalAttributeModel = None,
        clinicalAttributeId: str,
        patientId: str,
        sampleId: str = None,
        studyId: str,
        uniquePatientKey: str = None,
        uniqueSampleKey: str = None,
        value: str = None,
    ) -> None:
        self.clinicalAttribute = clinicalAttribute
        self.clinicalAttributeId = clinicalAttributeId
        self.patientId = patientId
        self.sampleId = sampleId
        self.studyId = studyId
        self.uniquePatientKey = uniquePatientKey
        self.uniqueSampleKey = uniqueSampleKey
        self.value = value

class ClinicalDataFilterModel(_Model):
    def __init__(
        self,
        *,
        attributeId: str = None,
        values: typing.List[DataFilterValueModel] = None,
    ) -> None:
        self.attributeId = attributeId
        self.values = values

class ClinicalDataIdentifierModel(_Model):
    def __init__(
        self,
        *,
        entityId: str = None,
        studyId: str = None,
    ) -> None:
        self.entityId = entityId
        self.studyId = studyId

class ClinicalDataMultiStudyFilterModel(_Model):
    def __init__(
        self,
        *,
        attributeIds: typing.List[str] = None,
        identifiers: typing.List[ClinicalDataIdentifierModel] = None,
    ) -> None:
        self.attributeIds = attributeIds
        self.identifiers = identifiers

class ClinicalDataSingleStudyFilterModel(_Model):
    def __init__(
        self,
        *,
        attributeIds: typing.List[str] = None,
        ids: typing.List[str] = None,
    ) -> None:
        self.attributeIds = attributeIds
        self.ids = ids

class ClinicalEventSampleModel(_Model):
    def __init__(
        self,
        *,
        patientId: str = None,
        sampleId: str = None,
        studyId: str = None,
        timeTaken: int = None,
    ) -> None:
        self.patientId = patientId
        self.sampleId = sampleId
        self.studyId = studyId
        self.timeTaken = timeTaken

class CopyNumberSegModel(_Model):
    def __init__(
        self,
        *,
        chromosome: str,
        end: int,
        numberOfProbes: int,
        patientId: str,
        sampleId: str,
        segmentMean: float,
        start: int,
        studyId: str,
        uniquePatientKey: str = None,
        uniqueSampleKey: str = None,
    ) -> None:
        self.chromosome = chromosome
        self.end = end
        self.numberOfProbes = numberOfProbes
        self.patientId = patientId
        self.sampleId = sampleId
        self.segmentMean = segmentMean
        self.start = start
        self.studyId = studyId
        self.uniquePatientKey = uniquePatientKey
        self.uniqueSampleKey = uniqueSampleKey

class DataFilterValueModel(_Model):
    def __init__(
        self,
        *,
        end: float = None,
        start: float = None,
        value: str = None,
    ) -> None:
        self.end = end
        self.start = start
        self.value = value

class DiscreteCopyNumberDataModel(_Model):
    def __init__(
        self,
        *,
        alteration: int,
        driverFilter: str = None,
        driverFilterAnnotation: str = None,
        driverTiersFilter: str = None,
        driverTiersFilterAnnotation: str = None,
        entrezGeneId: int,
        gene: GeneModel = None,
        molecularProfileId: str,
        patientId: str,
        sampleId: str,
        studyId: str,
        uniquePatientKey: str = None,
        uniqueSampleKey: str = None,
    ) -> None:
        self.alteration = alteration
        self.driverFilter = driverFilter
        self.driverFilterAnnotation = driverFilterAnnotation
        self.driverTiersFilter = driverTiersFilter
        self.driverTiersFilterAnnotation = driverTiersFilterAnnotation
        self.entrezGeneId = entrezGeneId
        self.gene = gene
        self.molecularProfileId = molecularProfileId
        self.patientId = patientId
        self.sampleId = sampleId
        self.studyId = studyId
        self.uniquePatientKey = uniquePatientKey
        self.uniqueSampleKey = uniqueSampleKey

class DiscreteCopyNumberFilterModel(_Model):
    def __init__(
        self,
        *,
        entrezGeneIds: typing.List[int] = None,
        sampleIds: typing.List[str] = None,
        sampleListId: str = None,
    ) -> None:
        self.entrezGeneIds = entrezGeneIds
        self.sampleIds = sampleIds
        self.sampleListId = sampleListId

class GeneModel(_Model):
    def __init__(
        self,
        *,
        entrezGeneId: int,
        geneticEntityId: int,
        hugoGeneSymbol: str,
        type: str = None,
    ) -> None:
        self.entrezGeneId = entrezGeneId
        self.geneticEntityId = geneticEntityId
        self.hugoGeneSymbol = hugoGeneSymbol
        self.type = type

class GeneFilterModel(_Model):
    def __init__(
        self,
        *,
        geneQueries: typing.List[typing.List[GeneFilterQueryModel]] = None,
        molecularProfileIds: typing.List[str] = None,
    ) -> None:
        self.geneQueries = geneQueries
        self.molecularProfileIds = molecularProfileIds

class GeneFilterQueryModel(_Model):
    def __init__(
        self,
        *,
        alterations: typing.List[str] = None,
        entrezGeneId: int = None,
        hugoGeneSymbol: str = None,
        includeDriver: bool = None,
        includeGermline: bool = None,
        includeSomatic: bool = None,
        includeUnknownOncogenicity: bool = None,
        includeUnknownStatus: bool = None,
        includeUnknownTier: bool = None,
        includeVUS: bool = None,
        tiersBooleanMap: typing.Mapping[str, typing.Any] = None,
    ) -> None:
        self.alterations = alterations
        self.entrezGeneId = entrezGeneId
        self.hugoGeneSymbol = hugoGeneSymbol
        self.includeDriver = includeDriver
        self.includeGermline = includeGermline
        self.includeSomatic = includeSomatic
        self.includeUnknownOncogenicity = includeUnknownOncogenicity
        self.includeUnknownStatus = includeUnknownStatus
        self.includeUnknownTier = includeUnknownTier
        self.includeVUS = includeVUS
        self.tiersBooleanMap = tiersBooleanMap

class GenePanelModel(_Model):
    def __init__(
        self,
        *,
        description: str = None,
        genePanelId: str,
        genes: typing.List[GenePanelToGeneModel] = None,
    ) -> None:
        self.description = description
        self.genePanelId = genePanelId
        self.genes = genes

class GenePanelDataModel(_Model):
    def __init__(
        self,
        *,
        genePanelId: str = None,
        molecularProfileId: str,
        patientId: str,
        profiled: bool,
        sampleId: str,
        studyId: str,
        uniquePatientKey: str = None,
        uniqueSampleKey: str = None,
    ) -> None:
        self.genePanelId = genePanelId
        self.molecularProfileId = molecularProfileId
        self.patientId = patientId
        self.profiled = profiled
        self.sampleId = sampleId
        self.studyId = studyId
        self.uniquePatientKey = uniquePatientKey
        self.uniqueSampleKey = uniqueSampleKey

class GenePanelDataFilterModel(_Model):
    def __init__(
        self,
        *,
        sampleIds: typing.List[str] = None,
        sampleListId: str = None,
    ) -> None:
        self.sampleIds = sampleIds
        self.sampleListId = sampleListId

class GenePanelDataMultipleStudyFilterModel(_Model):
    def __init__(
        self,
        *,
        molecularProfileIds: typing.List[str] = None,
        sampleMolecularIdentifiers: typing.List[SampleMolecularIdentifierModel] = None,
    ) -> None:
        self.molecularProfileIds = molecularProfileIds
        self.sampleMolecularIdentifiers = sampleMolecularIdentifiers

class GenePanelToGeneModel(_Model):
    def __init__(
        self,
        *,
        entrezGeneId: int,
        hugoGeneSymbol: str,
    ) -> None:
        self.entrezGeneId = entrezGeneId
        self.hugoGeneSymbol = hugoGeneSymbol

class GenericAssayDataModel(_Model):
    def __init__(
        self,
        *,
        genericAssayStableId: str,
        molecularProfileId: str,
        patientId: str,
        sampleId: str,
        stableId: str = None,
        studyId: str,
        uniquePatientKey: str = None,
        uniqueSampleKey: str = None,
        value: str,
    ) -> None:
        self.genericAssayStableId = genericAssayStableId
        self.molecularProfileId = molecularProfileId
        self.patientId = patientId
        self.sampleId = sampleId
        self.stableId = stableId
        self.studyId = studyId
        self.uniquePatientKey = uniquePatientKey
        self.uniqueSampleKey = uniqueSampleKey
        self.value = value

class GenericAssayDataFilterModel(_Model):
    def __init__(
        self,
        *,
        profileType: str = None,
        stableId: str = None,
        values: typing.List[DataFilterValueModel] = None,
    ) -> None:
        self.profileType = profileType
        self.stableId = stableId
        self.values = values

class GenericAssayDataMultipleStudyFilterModel(_Model):
    def __init__(
        self,
        *,
        genericAssayStableIds: typing.List[str] = None,
        molecularProfileIds: typing.List[str] = None,
        sampleMolecularIdentifiers: typing.List[SampleMolecularIdentifierModel] = None,
    ) -> None:
        self.genericAssayStableIds = genericAssayStableIds
        self.molecularProfileIds = molecularProfileIds
        self.sampleMolecularIdentifiers = sampleMolecularIdentifiers

class GenericAssayFilterModel(_Model):
    def __init__(
        self,
        *,
        genericAssayStableIds: typing.List[str] = None,
        sampleIds: typing.List[str] = None,
        sampleListId: str = None,
    ) -> None:
        self.genericAssayStableIds = genericAssayStableIds
        self.sampleIds = sampleIds
        self.sampleListId = sampleListId

class GenericAssayMetaModel(_Model):
    def __init__(
        self,
        *,
        entityType: str = None,
        genericEntityMetaProperties: typing.Mapping[str, typing.Any] = None,
        stableId: str = None,
    ) -> None:
        self.entityType = entityType
        self.genericEntityMetaProperties = genericEntityMetaProperties
        self.stableId = stableId

class GenericAssayMetaFilterModel(_Model):
    def __init__(
        self,
        *,
        genericAssayStableIds: typing.List[str] = None,
        molecularProfileIds: typing.List[str] = None,
    ) -> None:
        self.genericAssayStableIds = genericAssayStableIds
        self.molecularProfileIds = molecularProfileIds

class GenomicDataFilterModel(_Model):
    def __init__(
        self,
        *,
        hugoGeneSymbol: str = None,
        profileType: str = None,
        values: typing.List[DataFilterValueModel] = None,
    ) -> None:
        self.hugoGeneSymbol = hugoGeneSymbol
        self.profileType = profileType
        self.values = values

class InfoModel(_Model):
    def __init__(
        self,
        *,
        dbVersion: str,
        gitBranch: str,
        gitCommitId: str,
        gitCommitIdAbbrev: str,
        gitCommitIdDescribe: str,
        gitCommitIdDescribeShort: str,
        gitCommitMessageFull: str,
        gitCommitMessageShort: str,
        gitCommitMessageUserEmail: str,
        gitCommitMessageUserName: str,
        gitDirty: bool,
        portalVersion: str,
    ) -> None:
        self.dbVersion = dbVersion
        self.gitBranch = gitBranch
        self.gitCommitId = gitCommitId
        self.gitCommitIdAbbrev = gitCommitIdAbbrev
        self.gitCommitIdDescribe = gitCommitIdDescribe
        self.gitCommitIdDescribeShort = gitCommitIdDescribeShort
        self.gitCommitMessageFull = gitCommitMessageFull
        self.gitCommitMessageShort = gitCommitMessageShort
        self.gitCommitMessageUserEmail = gitCommitMessageUserEmail
        self.gitCommitMessageUserName = gitCommitMessageUserName
        self.gitDirty = gitDirty
        self.portalVersion = portalVersion

class MolecularDataFilterModel(_Model):
    def __init__(
        self,
        *,
        entrezGeneIds: typing.List[int] = None,
        sampleIds: typing.List[str] = None,
        sampleListId: str = None,
    ) -> None:
        self.entrezGeneIds = entrezGeneIds
        self.sampleIds = sampleIds
        self.sampleListId = sampleListId

class MolecularDataMultipleStudyFilterModel(_Model):
    def __init__(
        self,
        *,
        entrezGeneIds: typing.List[int] = None,
        molecularProfileIds: typing.List[str] = None,
        sampleMolecularIdentifiers: typing.List[SampleMolecularIdentifierModel] = None,
    ) -> None:
        self.entrezGeneIds = entrezGeneIds
        self.molecularProfileIds = molecularProfileIds
        self.sampleMolecularIdentifiers = sampleMolecularIdentifiers

class MolecularProfileModel(_Model):
    def __init__(
        self,
        *,
        datatype: str = None,
        description: str = None,
        genericAssayType: str = None,
        molecularAlterationType: str = None,
        molecularProfileId: str,
        name: str = None,
        patientLevel: bool,
        pivotThreshold: float = None,
        showProfileInAnalysisTab: bool = None,
        sortOrder: str = None,
        study: CancerStudyModel = None,
        studyId: str,
    ) -> None:
        self.datatype = datatype
        self.description = description
        self.genericAssayType = genericAssayType
        self.molecularAlterationType = molecularAlterationType
        self.molecularProfileId = molecularProfileId
        self.name = name
        self.patientLevel = patientLevel
        self.pivotThreshold = pivotThreshold
        self.showProfileInAnalysisTab = showProfileInAnalysisTab
        self.sortOrder = sortOrder
        self.study = study
        self.studyId = studyId

class MolecularProfileFilterModel(_Model):
    def __init__(
        self,
        *,
        molecularProfileIds: typing.List[str] = None,
        studyIds: typing.List[str] = None,
    ) -> None:
        self.molecularProfileIds = molecularProfileIds
        self.studyIds = studyIds

class MutationModel(_Model):
    def __init__(
        self,
        *,
        alleleSpecificCopyNumber: AlleleSpecificCopyNumberModel = None,
        aminoAcidChange: str = None,
        center: str = None,
        chr: str = None,
        driverFilter: str = None,
        driverFilterAnnotation: str = None,
        driverTiersFilter: str = None,
        driverTiersFilterAnnotation: str = None,
        endPosition: int = None,
        entrezGeneId: int,
        fisValue: float = None,
        functionalImpactScore: str = None,
        gene: GeneModel = None,
        keyword: str = None,
        linkMsa: str = None,
        linkPdb: str = None,
        linkXvar: str = None,
        molecularProfileId: str,
        mutationStatus: str = None,
        mutationType: str = None,
        namespaceColumns: typing.Mapping[str, typing.Any] = None,
        ncbiBuild: str = None,
        normalAltCount: int = None,
        normalRefCount: int = None,
        patientId: str,
        proteinChange: str = None,
        proteinPosEnd: int = None,
        proteinPosStart: int = None,
        referenceAllele: str = None,
        refseqMrnaId: str = None,
        sampleId: str,
        startPosition: int = None,
        studyId: str,
        tumorAltCount: int = None,
        tumorRefCount: int = None,
        uniquePatientKey: str = None,
        uniqueSampleKey: str = None,
        validationStatus: str = None,
        variantAllele: str = None,
        variantType: str = None,
    ) -> None:
        self.alleleSpecificCopyNumber = alleleSpecificCopyNumber
        self.aminoAcidChange = aminoAcidChange
        self.center = center
        self.chr = chr
        self.driverFilter = driverFilter
        self.driverFilterAnnotation = driverFilterAnnotation
        self.driverTiersFilter = driverTiersFilter
        self.driverTiersFilterAnnotation = driverTiersFilterAnnotation
        self.endPosition = endPosition
        self.entrezGeneId = entrezGeneId
        self.fisValue = fisValue
        self.functionalImpactScore = functionalImpactScore
        self.gene = gene
        self.keyword = keyword
        self.linkMsa = linkMsa
        self.linkPdb = linkPdb
        self.linkXvar = linkXvar
        self.molecularProfileId = molecularProfileId
        self.mutationStatus = mutationStatus
        self.mutationType = mutationType
        self.namespaceColumns = namespaceColumns
        self.ncbiBuild = ncbiBuild
        self.normalAltCount = normalAltCount
        self.normalRefCount = normalRefCount
        self.patientId = patientId
        self.proteinChange = proteinChange
        self.proteinPosEnd = proteinPosEnd
        self.proteinPosStart = proteinPosStart
        self.referenceAllele = referenceAllele
        self.refseqMrnaId = refseqMrnaId
        self.sampleId = sampleId
        self.startPosition = startPosition
        self.studyId = studyId
        self.tumorAltCount = tumorAltCount
        self.tumorRefCount = tumorRefCount
        self.uniquePatientKey = uniquePatientKey
        self.uniqueSampleKey = uniqueSampleKey
        self.validationStatus = validationStatus
        self.variantAllele = variantAllele
        self.variantType = variantType

class MutationFilterModel(_Model):
    def __init__(
        self,
        *,
        entrezGeneIds: typing.List[int] = None,
        sampleIds: typing.List[str] = None,
        sampleListId: str = None,
    ) -> None:
        self.entrezGeneIds = entrezGeneIds
        self.sampleIds = sampleIds
        self.sampleListId = sampleListId

class MutationMultipleStudyFilterModel(_Model):
    def __init__(
        self,
        *,
        entrezGeneIds: typing.List[int] = None,
        molecularProfileIds: typing.List[str] = None,
        sampleMolecularIdentifiers: typing.List[SampleMolecularIdentifierModel] = None,
    ) -> None:
        self.entrezGeneIds = entrezGeneIds
        self.molecularProfileIds = molecularProfileIds
        self.sampleMolecularIdentifiers = sampleMolecularIdentifiers

class NumericGeneMolecularDataModel(_Model):
    def __init__(
        self,
        *,
        entrezGeneId: int,
        gene: GeneModel = None,
        molecularProfileId: str,
        patientId: str,
        sampleId: str,
        studyId: str,
        uniquePatientKey: str = None,
        uniqueSampleKey: str = None,
        value: float,
    ) -> None:
        self.entrezGeneId = entrezGeneId
        self.gene = gene
        self.molecularProfileId = molecularProfileId
        self.patientId = patientId
        self.sampleId = sampleId
        self.studyId = studyId
        self.uniquePatientKey = uniquePatientKey
        self.uniqueSampleKey = uniqueSampleKey
        self.value = value

class OredPatientTreatmentFiltersModel(_Model):
    def __init__(
        self,
        *,
        filters: typing.List[PatientTreatmentFilterModel] = None,
    ) -> None:
        self.filters = filters

class OredSampleTreatmentFiltersModel(_Model):
    def __init__(
        self,
        *,
        filters: typing.List[SampleTreatmentFilterModel] = None,
    ) -> None:
        self.filters = filters

class PatientModel(_Model):
    def __init__(
        self,
        *,
        cancerStudy: CancerStudyModel = None,
        patientId: str,
        studyId: str,
        uniquePatientKey: str = None,
        uniqueSampleKey: str = None,
    ) -> None:
        self.cancerStudy = cancerStudy
        self.patientId = patientId
        self.studyId = studyId
        self.uniquePatientKey = uniquePatientKey
        self.uniqueSampleKey = uniqueSampleKey

class PatientFilterModel(_Model):
    def __init__(
        self,
        *,
        patientIdentifiers: typing.List[PatientIdentifierModel] = None,
        uniquePatientKeys: typing.List[str] = None,
    ) -> None:
        self.patientIdentifiers = patientIdentifiers
        self.uniquePatientKeys = uniquePatientKeys

class PatientIdentifierModel(_Model):
    def __init__(
        self,
        *,
        patientId: str = None,
        studyId: str = None,
    ) -> None:
        self.patientId = patientId
        self.studyId = studyId

class PatientTreatmentFilterModel(_Model):
    def __init__(
        self,
        *,
        treatment: str = None,
    ) -> None:
        self.treatment = treatment

class PatientTreatmentRowModel(_Model):
    def __init__(
        self,
        *,
        count: int = None,
        samples: typing.List[ClinicalEventSampleModel] = None,
        treatment: str = None,
    ) -> None:
        self.count = count
        self.samples = samples
        self.treatment = treatment

class SampleModel(_Model):
    def __init__(
        self,
        *,
        copyNumberSegmentPresent: bool = None,
        patientId: str,
        sampleId: str,
        sampleType: str = None,
        sequenced: bool = None,
        studyId: str,
        uniquePatientKey: str = None,
        uniqueSampleKey: str = None,
    ) -> None:
        self.copyNumberSegmentPresent = copyNumberSegmentPresent
        self.patientId = patientId
        self.sampleId = sampleId
        self.sampleType = sampleType
        self.sequenced = sequenced
        self.studyId = studyId
        self.uniquePatientKey = uniquePatientKey
        self.uniqueSampleKey = uniqueSampleKey

class SampleFilterModel(_Model):
    def __init__(
        self,
        *,
        sampleIdentifiers: typing.List[SampleIdentifierModel] = None,
        sampleListIds: typing.List[str] = None,
        uniqueSampleKeys: typing.List[str] = None,
    ) -> None:
        self.sampleIdentifiers = sampleIdentifiers
        self.sampleListIds = sampleListIds
        self.uniqueSampleKeys = uniqueSampleKeys

class SampleIdentifierModel(_Model):
    def __init__(
        self,
        *,
        sampleId: str = None,
        studyId: str = None,
    ) -> None:
        self.sampleId = sampleId
        self.studyId = studyId

class SampleListModel(_Model):
    def __init__(
        self,
        *,
        category: str = None,
        description: str = None,
        name: str = None,
        sampleCount: int = None,
        sampleIds: typing.List[str] = None,
        sampleListId: str,
        studyId: str = None,
    ) -> None:
        self.category = category
        self.description = description
        self.name = name
        self.sampleCount = sampleCount
        self.sampleIds = sampleIds
        self.sampleListId = sampleListId
        self.studyId = studyId

class SampleMolecularIdentifierModel(_Model):
    def __init__(
        self,
        *,
        molecularProfileId: str = None,
        sampleId: str = None,
    ) -> None:
        self.molecularProfileId = molecularProfileId
        self.sampleId = sampleId

class SampleTreatmentFilterModel(_Model):
    def __init__(
        self,
        *,
        time: str = None,
        treatment: str = None,
    ) -> None:
        self.time = time
        self.treatment = treatment

class SampleTreatmentRowModel(_Model):
    def __init__(
        self,
        *,
        count: int = None,
        samples: typing.List[ClinicalEventSampleModel] = None,
        time: str = None,
        treatment: str = None,
    ) -> None:
        self.count = count
        self.samples = samples
        self.time = time
        self.treatment = treatment

class ServerStatusMessageModel(_Model):
    def __init__(
        self,
        *,
        status: str = None,
    ) -> None:
        self.status = status

class StudyViewFilterModel(_Model):
    def __init__(
        self,
        *,
        alterationFilter: AlterationFilterModel = None,
        caseLists: typing.List[typing.List[str]] = None,
        clinicalDataFilters: typing.List[ClinicalDataFilterModel] = None,
        customDataFilters: typing.List[ClinicalDataFilterModel] = None,
        geneFilters: typing.List[GeneFilterModel] = None,
        genericAssayDataFilters: typing.List[GenericAssayDataFilterModel] = None,
        genomicDataFilters: typing.List[GenomicDataFilterModel] = None,
        genomicProfiles: typing.List[typing.List[str]] = None,
        patientTreatmentFilters: AndedPatientTreatmentFiltersModel = None,
        patientTreatmentGroupFilters: AndedPatientTreatmentFiltersModel = None,
        patientTreatmentTargetFilters: AndedPatientTreatmentFiltersModel = None,
        sampleIdentifiers: typing.List[SampleIdentifierModel] = None,
        sampleTreatmentFilters: AndedSampleTreatmentFiltersModel = None,
        sampleTreatmentGroupFilters: AndedSampleTreatmentFiltersModel = None,
        sampleTreatmentTargetFilters: AndedSampleTreatmentFiltersModel = None,
        studyIds: typing.List[str] = None,
    ) -> None:
        self.alterationFilter = alterationFilter
        self.caseLists = caseLists
        self.clinicalDataFilters = clinicalDataFilters
        self.customDataFilters = customDataFilters
        self.geneFilters = geneFilters
        self.genericAssayDataFilters = genericAssayDataFilters
        self.genomicDataFilters = genomicDataFilters
        self.genomicProfiles = genomicProfiles
        self.patientTreatmentFilters = patientTreatmentFilters
        self.patientTreatmentGroupFilters = patientTreatmentGroupFilters
        self.patientTreatmentTargetFilters = patientTreatmentTargetFilters
        self.sampleIdentifiers = sampleIdentifiers
        self.sampleTreatmentFilters = sampleTreatmentFilters
        self.sampleTreatmentGroupFilters = sampleTreatmentGroupFilters
        self.sampleTreatmentTargetFilters = sampleTreatmentTargetFilters
        self.studyIds = studyIds

class TypeOfCancerModel(_Model):
    def __init__(
        self,
        *,
        cancerTypeId: str,
        dedicatedColor: str = None,
        name: str = None,
        parent: str = None,
        shortName: str = None,
    ) -> None:
        self.cancerTypeId = cancerTypeId
        self.dedicatedColor = dedicatedColor
        self.name = name
        self.parent = parent
        self.shortName = shortName
